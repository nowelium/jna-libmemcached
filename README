jna-libmemcached
----

  libmemcached(libmemcched-0.40) for JNA

  libmemcacehd:
    http://libmemcached.org/

  JNA:
    http://jna.dev.java.net/

documents:
----

  http://nowelium.github.com/jna-libmemcached/


example
----

  C-lang style(use libmemcached proxy):
  ========
    
    memcached memcached = LibMemcached.memcached;
            
    System.out.println(memcached.memcached_lib_version());
    memcached_st mmc = memcached.memcached_create(null);
    
    memcached.memcached_server_add(mmc, "localhost", 11211);
    {
        String key = "hoge";
        size_t keylen = new size_t(key.length());
        String value = "1234";
        size_t valuelen = new size_t(value.length());
        time_t expiration = new time_t(10);
        
        int rc = memcached.memcached_set(mmc, key, keylen, value, valuelen, expiration, 0);
        if (memcached_return.MEMCACHED_SUCCESS != rc && memcached_return.MEMCACHED_BUFFERED != rc) {
            memcached.memcached_free(mmc);
            throw new LibMemcachedRuntimeException(memcached.memcached_strerror(mmc, rc));
        }
    }
    memcached.memcached_free(mmc);


  Java style(libmemcached wrapper):
  ========

    MemcachedClient client = new MemcachedClient();
    System.out.println(client.libraryVersion());
    ReturnType err = client.addServer("localhost", 11211);
    System.out.println(err);
    
    MemcachedStorage storage = client.getStorage();
    ReturnType rt = storage.set("hoge", "1234", 10, 0);
    System.out.println(rt);
    
    try {
        System.out.println(storage.get("hoge"));
    } catch(LibMemcachedException e){
        e.printStackTrace();
    }

  Functions (use static import):
  ========

    import static libmemcached.wrapper.function.Memcached.memcached_create;
    import static libmemcached.wrapper.function.Memcached.memcached_free;
    import static libmemcached.wrapper.function.Server.memcached_server_add;
    import static libmemcached.wrapper.function.Storage.memcached_set;
    import static libmemcached.wrapper.function.Get.memcached_get;

    memcached_st mmc = memcached_create();
    try {
        memcached_server_add(mmc, "localhost", 11211);
        
        memcached_set(mmc, "hello", "world", 10, 0);
        
        try {
            SimpleResult result = memcached_get(mmc, "hello");
            System.out.println("value = " + result.getValue() + ", flags = " + result.getFlags());
        } catch (LibMemcachedException e) {
            e.printStackTrace();
        }
    } finally {
        memcached_free(mmc);
    }



note
----

64bit OSX libmemcached configure option::

    ./configure --prefix=/usr  --enable-fat-binaries
