function::

    memcached_st mmc = memcached.memcached_create(null);
    
    memcached.memcached_server_add(mmc, "localhost", 11211);
    {
        String key = "hoge";
        size_t keylen = new size_t(key.length());
        String value = "1234";
        size_t valuelen = new size_t(value.length());
        time_t expiration = new time_t(10);
        
        int rc = memcached.memcached_set(mmc, key, keylen, value, valuelen, expiration, 0);
        if (memcached_return.MEMCACHED_SUCCESS != rc && memcached_return.MEMCACHED_BUFFERED != rc) {
            memcached.memcached_free(mmc);
            throw new LibMemcachedRuntimeException(memcached.memcached_strerror(mmc, rc));
        }
    }
    memcached.memcached_free(mmc);

class::

    MemcachedClient client = new MemcachedClient();
    ReturnType err = client.addServer("localhost", 11211);
        
    MemcachedStorage storage = client.getStorage();
    ReturnType rt = storage.set("hoge", "1234", 10, 0);
        
    try {
        System.out.println(storage.get("hoge"));
    } catch(LibMemcachedException e){
        e.printStackTrace();
    }
